/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.watchman.avro.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroKafkaEventMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7069279053076544930L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroKafkaEventMessage\",\"namespace\":\"com.watchman.avro.schema\",\"fields\":[{\"name\":\"apiKey\",\"type\":\"string\"},{\"name\":\"event\",\"type\":{\"type\":\"record\",\"name\":\"AvroEvent\",\"fields\":[{\"name\":\"eventId\",\"type\":\"long\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"timeStamp\",\"type\":\"long\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"browser\",\"type\":\"string\"},{\"name\":\"device\",\"type\":\"string\"},{\"name\":\"payload\",\"type\":{\"type\":\"map\",\"values\":[\"string\",\"long\"]}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroKafkaEventMessage> ENCODER =
      new BinaryMessageEncoder<AvroKafkaEventMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroKafkaEventMessage> DECODER =
      new BinaryMessageDecoder<AvroKafkaEventMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroKafkaEventMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroKafkaEventMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroKafkaEventMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroKafkaEventMessage>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroKafkaEventMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroKafkaEventMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroKafkaEventMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroKafkaEventMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence apiKey;
   private com.watchman.avro.schema.AvroEvent event;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroKafkaEventMessage() {}

  /**
   * All-args constructor.
   * @param apiKey The new value for apiKey
   * @param event The new value for event
   */
  public AvroKafkaEventMessage(java.lang.CharSequence apiKey, com.watchman.avro.schema.AvroEvent event) {
    this.apiKey = apiKey;
    this.event = event;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return apiKey;
    case 1: return event;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: apiKey = (java.lang.CharSequence)value$; break;
    case 1: event = (com.watchman.avro.schema.AvroEvent)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'apiKey' field.
   * @return The value of the 'apiKey' field.
   */
  public java.lang.CharSequence getApiKey() {
    return apiKey;
  }


  /**
   * Sets the value of the 'apiKey' field.
   * @param value the value to set.
   */
  public void setApiKey(java.lang.CharSequence value) {
    this.apiKey = value;
  }

  /**
   * Gets the value of the 'event' field.
   * @return The value of the 'event' field.
   */
  public com.watchman.avro.schema.AvroEvent getEvent() {
    return event;
  }


  /**
   * Sets the value of the 'event' field.
   * @param value the value to set.
   */
  public void setEvent(com.watchman.avro.schema.AvroEvent value) {
    this.event = value;
  }

  /**
   * Creates a new AvroKafkaEventMessage RecordBuilder.
   * @return A new AvroKafkaEventMessage RecordBuilder
   */
  public static com.watchman.avro.schema.AvroKafkaEventMessage.Builder newBuilder() {
    return new com.watchman.avro.schema.AvroKafkaEventMessage.Builder();
  }

  /**
   * Creates a new AvroKafkaEventMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroKafkaEventMessage RecordBuilder
   */
  public static com.watchman.avro.schema.AvroKafkaEventMessage.Builder newBuilder(com.watchman.avro.schema.AvroKafkaEventMessage.Builder other) {
    if (other == null) {
      return new com.watchman.avro.schema.AvroKafkaEventMessage.Builder();
    } else {
      return new com.watchman.avro.schema.AvroKafkaEventMessage.Builder(other);
    }
  }

  /**
   * Creates a new AvroKafkaEventMessage RecordBuilder by copying an existing AvroKafkaEventMessage instance.
   * @param other The existing instance to copy.
   * @return A new AvroKafkaEventMessage RecordBuilder
   */
  public static com.watchman.avro.schema.AvroKafkaEventMessage.Builder newBuilder(com.watchman.avro.schema.AvroKafkaEventMessage other) {
    if (other == null) {
      return new com.watchman.avro.schema.AvroKafkaEventMessage.Builder();
    } else {
      return new com.watchman.avro.schema.AvroKafkaEventMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroKafkaEventMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroKafkaEventMessage>
    implements org.apache.avro.data.RecordBuilder<AvroKafkaEventMessage> {

    private java.lang.CharSequence apiKey;
    private com.watchman.avro.schema.AvroEvent event;
    private com.watchman.avro.schema.AvroEvent.Builder eventBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.watchman.avro.schema.AvroKafkaEventMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.apiKey)) {
        this.apiKey = data().deepCopy(fields()[0].schema(), other.apiKey);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.event)) {
        this.event = data().deepCopy(fields()[1].schema(), other.event);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasEventBuilder()) {
        this.eventBuilder = com.watchman.avro.schema.AvroEvent.newBuilder(other.getEventBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing AvroKafkaEventMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.watchman.avro.schema.AvroKafkaEventMessage other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.apiKey)) {
        this.apiKey = data().deepCopy(fields()[0].schema(), other.apiKey);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.event)) {
        this.event = data().deepCopy(fields()[1].schema(), other.event);
        fieldSetFlags()[1] = true;
      }
      this.eventBuilder = null;
    }

    /**
      * Gets the value of the 'apiKey' field.
      * @return The value.
      */
    public java.lang.CharSequence getApiKey() {
      return apiKey;
    }


    /**
      * Sets the value of the 'apiKey' field.
      * @param value The value of 'apiKey'.
      * @return This builder.
      */
    public com.watchman.avro.schema.AvroKafkaEventMessage.Builder setApiKey(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.apiKey = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'apiKey' field has been set.
      * @return True if the 'apiKey' field has been set, false otherwise.
      */
    public boolean hasApiKey() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'apiKey' field.
      * @return This builder.
      */
    public com.watchman.avro.schema.AvroKafkaEventMessage.Builder clearApiKey() {
      apiKey = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'event' field.
      * @return The value.
      */
    public com.watchman.avro.schema.AvroEvent getEvent() {
      return event;
    }


    /**
      * Sets the value of the 'event' field.
      * @param value The value of 'event'.
      * @return This builder.
      */
    public com.watchman.avro.schema.AvroKafkaEventMessage.Builder setEvent(com.watchman.avro.schema.AvroEvent value) {
      validate(fields()[1], value);
      this.eventBuilder = null;
      this.event = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'event' field has been set.
      * @return True if the 'event' field has been set, false otherwise.
      */
    public boolean hasEvent() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'event' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.watchman.avro.schema.AvroEvent.Builder getEventBuilder() {
      if (eventBuilder == null) {
        if (hasEvent()) {
          setEventBuilder(com.watchman.avro.schema.AvroEvent.newBuilder(event));
        } else {
          setEventBuilder(com.watchman.avro.schema.AvroEvent.newBuilder());
        }
      }
      return eventBuilder;
    }

    /**
     * Sets the Builder instance for the 'event' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.watchman.avro.schema.AvroKafkaEventMessage.Builder setEventBuilder(com.watchman.avro.schema.AvroEvent.Builder value) {
      clearEvent();
      eventBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'event' field has an active Builder instance
     * @return True if the 'event' field has an active Builder instance
     */
    public boolean hasEventBuilder() {
      return eventBuilder != null;
    }

    /**
      * Clears the value of the 'event' field.
      * @return This builder.
      */
    public com.watchman.avro.schema.AvroKafkaEventMessage.Builder clearEvent() {
      event = null;
      eventBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroKafkaEventMessage build() {
      try {
        AvroKafkaEventMessage record = new AvroKafkaEventMessage();
        record.apiKey = fieldSetFlags()[0] ? this.apiKey : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (eventBuilder != null) {
          try {
            record.event = this.eventBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("event"));
            throw e;
          }
        } else {
          record.event = fieldSetFlags()[1] ? this.event : (com.watchman.avro.schema.AvroEvent) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroKafkaEventMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroKafkaEventMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroKafkaEventMessage>
    READER$ = (org.apache.avro.io.DatumReader<AvroKafkaEventMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










